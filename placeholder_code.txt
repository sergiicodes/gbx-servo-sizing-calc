# Import Libraries 
import pandas as pd 
import os

# Names the Excel file and sheet
project_name = "BRENTON 4485"
axis_name = "LAYER CONVEYOR"

# Pandas Read
location = r"C:\Users\shacosta\Desktop\Analyzer Selection - Copy.xlsx"
try:
    df = pd.read_excel(location)
except:
    print("Error: could not read Excel file")
    exit()

# Gearbox Section
gbx_name = df.iloc[1:, 1].astype(str).str.strip() 
gbx_ratio = pd.to_numeric(df.iloc[1:,3], errors='coerce')
gbx_speed = pd.to_numeric(df.iloc[1:,4], errors='coerce')
gbx_torque = pd.to_numeric(df.iloc[1:,5], errors='coerce')
gbx_cost = pd.to_numeric(df.iloc[1:,6], errors='coerce')


# Drive Section 
drive_name = df.iloc[1:, 17].astype(str).str.strip().dropna().reset_index(drop=True)
drive_name = drive_name[drive_name != 'nan'].reset_index(drop=True) 
drive_cost = pd.to_numeric(df.iloc[1:,19], errors='coerce').dropna()

# Inputs
gbx_type = "NPL"

if gbx_type == "Cone Drive":
    first_three_letters = "S"
else:
    first_three_letters = gbx_type[:4]  # Get the first two letters of the selected gearbox type

# Filter the gbx_name column based on the first two letters of gearbox names
selected_gbx_names = gbx_name[gbx_name.str.startswith(first_three_letters)]

# Error Handling 
if len(selected_gbx_names) == 0:
    print("No gearbox names found for the selected type.")
else:
    pass


 
# Input Calculations from Motion Analyzer 
peak_speed = 41.5
peak_torque_input = 32.97
peak_acceleration = 8.70
max_inertia = 1.14


# Calculate the new speed for each selected gearbox
new_speeds = []
for ratio in gbx_ratio[gbx_name.str.startswith(first_three_letters)]:
    new_speeds.append(ratio * peak_speed)


# Servo Section
servo_name = df.iloc[1:, 10].astype(str).str.strip().dropna().reset_index(drop=True)
servo_name = servo_name[servo_name != 'nan'].reset_index(drop=True) 
servo_cont_torque = pd.to_numeric(df.iloc[1:,11], errors='coerce').dropna()
servo_peak_torque = pd.to_numeric(df.iloc[1:,12], errors='coerce').dropna()
servo_velocity = pd.to_numeric(df.iloc[1:,13], errors='coerce').dropna()
servo_cost = pd.to_numeric(df.iloc[1:,15], errors='coerce').dropna()

#servo_and_drive_TOTALcost = pd.to_numeric(df.iloc[1:,20], errors='coerce').dropna().values

# Create a set to keep track of unique combinations of percentage values
seen_combinations = set()
results = [] 
# Filter the gbx_cost column based on the selected_gbx_names
selected_gbx_cost = gbx_cost[gbx_name.str.startswith(first_three_letters)].dropna()

for name, ratio in zip(selected_gbx_names, gbx_ratio[gbx_name.str.startswith(first_three_letters)]):
    new_speed = ratio * peak_speed
    for servo, velocity, cost, peak_torque, cont_torque in zip(servo_name, servo_velocity, servo_cost, servo_peak_torque, servo_cont_torque):
        post_gbx_torque = (peak_torque_input) / ((ratio) * ((1 - ((max_inertia* peak_acceleration) / (peak_torque * ratio)))))        
        percentage_speed = new_speed / velocity * 100
        percentage_peak_torque = post_gbx_torque / peak_torque * 100
        percentage_cont_torque = post_gbx_torque / cont_torque * 100
        if percentage_speed <= 80 and percentage_peak_torque <= 80 and percentage_cont_torque <= 65 and percentage_peak_torque >= 0 and percentage_cont_torque >= 0:
            combination = (percentage_speed, percentage_peak_torque, percentage_cont_torque)
            
            total_cost = gbx_cost[gbx_name == name].iloc[0] + cost + drive_cost
            result = {"Drive Name": drive_name, "Servo": servo, "Gearbox Name": name, "Percentage Speed": percentage_speed, "Percentage Peak Torque": percentage_peak_torque, "Percentage Cont Torque": percentage_cont_torque, "Total Cost": total_cost}
            results.append(result)
            seen_combinations.add(combination)

df_results = pd.DataFrame(results)
print(df_results)
