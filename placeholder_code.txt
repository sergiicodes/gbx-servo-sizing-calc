# Import Libraries 
import pandas as pd 

# Pandas Read
location = r"C:\Users\shacosta\Desktop\Analyzer Selection - Copy.xlsx"
try:
    df = pd.read_excel(location)
except:
    print("Error: could not read Excel file")
    exit()

# Gearbox Section
gbx_item_num = pd.to_numeric(df.iloc[1:,0], errors='coerce').dropna().apply(lambda x: int(x))
gbx_name = df.iloc[1:, 1].astype(str).str.strip() 
gbx_frame = pd.to_numeric(df.iloc[1:,2], errors='coerce')
gbx_ratio = pd.to_numeric(df.iloc[1:,3], errors='coerce')
gbx_speed = pd.to_numeric(df.iloc[1:,4], errors='coerce')
gbx_torque = pd.to_numeric(df.iloc[1:,5], errors='coerce')
gbx_cost = pd.to_numeric(df.iloc[1:,6], errors='coerce')

# Drive Section 
drive_item_num = pd.to_numeric(df.iloc[1:,16], errors='coerce').dropna().apply(lambda x: int(x))
drive_name = df.iloc[1:, 17].astype(str).str.strip()
drive_name = drive_name[drive_name != 'nan'].reset_index(drop=True) 
drive_series = pd.to_numeric(df.iloc[1:,18], errors='coerce').dropna()
drive_cost = pd.to_numeric(df.iloc[1:,19], errors='coerce').dropna()

# Dictionary of Servos that Correspond to Respective Servo Drives
# K5700 D-Drives
k57_D_dict = {
    "0632": drive_name[0],
    "0753": drive_name[0],
    "1001": drive_name[0],
    "1002": drive_name[0],
    "1003": drive_name[10],
    "1152": drive_name[13],
    "1153": drive_name[13],
    "1303": drive_name[13],
    "1304": drive_name[23],
    "1306": drive_name[23],
    "1652": drive_name[34],
    "1654": drive_name[34] 
}


# Inputs
gbx_type = "NPL"

if gbx_type == "Cone Drive":
    first_three_letters = "S"
else:
    first_three_letters = gbx_type[:4]  # Get the first two letters of the selected gearbox type

# Filter the gbx_name column based on the first two letters of gearbox names
selected_gbx_names = gbx_name[gbx_name.str.startswith(first_three_letters)]

# Error Handling 
if len(selected_gbx_names) == 0:
    print("No gearbox names found for the selected type.")
else:
    pass

# Servo Section
servo_item_num = pd.to_numeric(df.iloc[1:,9], errors='coerce').dropna().apply(lambda x: int(x))
servo_name = df.iloc[1:, 10].astype(str).str.strip()
servo_name = servo_name[servo_name != 'nan'].reset_index(drop=True) 
servo_cont_torque = pd.to_numeric(df.iloc[1:,11], errors='coerce').dropna()
servo_peak_torque = pd.to_numeric(df.iloc[1:,12], errors='coerce').dropna()
servo_velocity = pd.to_numeric(df.iloc[1:,13], errors='coerce').dropna()
servo_cost = pd.to_numeric(df.iloc[1:,15], errors='coerce').dropna()


# Create a list to store the servo and drive names
servo_drive_list = []

# Loop through the servo names and find their corresponding drive names
for name in servo_name:
    serv_id = name[5:9]
    if serv_id in k57_D_dict:
        drive_name = k57_D_dict[serv_id]
        servo_drive_list.append([name, drive_name])
    else:
        servo_drive_list.append([name, "No matching drive found"])

# Create a dataframe from the servo_drive_list
servo_drive_df = pd.DataFrame(servo_drive_list, columns=["Servo Name", "Drive Name"])

# Add a column for total cost
servo_drive_df["Total Cost"] = servo_cost + drive_cost

# Print the DataFrame
print(servo_drive_df)
